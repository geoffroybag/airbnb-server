#!/usr/bin/env node

const http = require('http');
const socket     = require("socket.io");
let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.json({status: 404, message: "404 Not Found"});
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.json({status: 500, message: "Error, check terminal"});
  }
});

// let server = http.createServer(app);

// server.on('error', error => {
//   if (error.syscall !== 'listen') { throw error }

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(`Port ${process.env.PORT} requires elevated privileges`);
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(`Port ${process.env.PORT} is already in use`);
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// });



const server = require('http').createServer(app);
const io = require('socket.io')(server);

io.set('origins', '*:*');
io.on('connection', function(socket){
  socket.on('chat message', function(msg){
    io.emit('chat message', msg);
  });
});

server.listen(process.env.PORT, () => {
	console.log(`Listening on http://localhost:${process.env.PORT}`);
})